# This assembly file will read in a user input and return its Fibonacci number. For example, if 0 is entered, 0 will be return. If 1 is entered, 1 will be returned. If 6 is entered, the sixth Fibonacci number will be returned (8).

# Note that very,very large numbers should not be used. That is because this asssembly program uses recursion. The stack may grow and interfere with the code block of the memory. This MIPS system offers no write-protection to the code block

# The user's input will be stored in address 100
# The output will be stored in address 101
# Note that as the MIPS implementation has no labels, addresses are hardcoded into jumps and branches. Hence, adding or removing a line of code will break these jumps and branches

# Fibonacci calcutor (uses recursion)
000101-00000-00000-00000-00001-100100   #(input 100) Take in user input and store in address 100
001000-00000-10011-00000-00001-100100	#(addi $s3 $zero 100) Save address of 100 into $t0
100011-10011-00100-00000-00000-000000   #(lw $a0 0($s3)) Load in user input as argument
001000-00000-10010-00000-00000-000001   #(addi $s2 $zero 1) Save a value of 1. This will come in handy for function.
001000-00000-11111-00000-00000-011110  #(addi $ra $zero 30TH INSTRUCTION) Tell function where to return to

# Save registers to the stack
001000-11101-11101-11111-11111-111100   #(addi $sp $sp -4) Save stuff to stack #5TH INSTRUCTION (0-INDEXED)
101011-11101-11111-00000-00000-000000   #(sw $ra 0($sp))
101011-11101-11101-00000-00000-000001   #(sw $fp 1($sp))
101011-11101-10000-00000-00000-000010   #(sw $s0 2($sp)) For the argument
101011-11101-10001-00000-00000-000011   #(sw $s1 3($sp)) For saving interim results
001000-11101-11110-00000-00000-000100   #(addi $fp $sp 4)
000000-00000-00100-10000-00000-100000   #(add $s0 $zero $a0) Save argument

# Test for base cases
111100-00000-00100-00000-00000-001111   #Jump to 15TH INSTRUCTION if argument != 0
000000-00000-00000-00010-00000-100000   #(add $v0 $zero $zero) Prepare to return 0
000010-00000-00000-00000-00000-011000   #Unconditional jump to 24TH INSTRUCTION

111100-10010-00100-00000-00000-010010   #Branch to 18TH INSTRUCTION if argument != 1
000000-00000-10010-00010-00000-100000   #(add $v0 $zero $s1) Prepare to return 1
000010-00000-00000-00000-00000-011000   #Unconditional jump to 24TH INSTRUCTION

# Run if base cases are not met
000000-10000-10010-00100-00000-100010   #(sub $a0 $s0 $s2) Subtract one from the argument
000100-00000-00000-00000-00000-000101   #(jal 5TH INSTRUCTION)
000000-00000-00010-10001-00000-100000   #(add $s1 $zero $v0) Save result
001000-10000-00100-11111-11111-111110   #(addi $a0 $s0 -2)
000100-00000-00000-00000-00000-000101   #(jal 5TH INSTRUCTION)

# If base cases not met, return fib(n-1) + fib(n-2)
000000-00010-10001-00010-00000-100000   #(add $v0 $v0 $s1)

# Restore register values from the stack
100011-11101-11111-00000-00000-000000   #(lw $ra 0($sp))	# 24TH INSTRUCTION (0-INDEXED)
100011-11101-11110-00000-00000-000001   #(lw $fp 1($sp))
100011-11101-10000-00000-00000-000010   #(lw $s0 2($sp))
100011-11101-10001-00000-00000-000011   #(lw $s1 3($sp))
001000-11101-11101-00000-00000-000100   #(addi $sp $sp 4)

# Jump to the callee
000000-11111-00000-00000-00000-001000   #jr $ra

#Store the output
101011-10011-00010-00000-00000-000001   #(sw $v0 1($s3)) #30TH INSTRUCTION (0-INDEXED)
000110-00000-00000-00000-00001-100101	#Output contents of address 101 (i.e. output of fib)

###### 	EXPECTED MEMORY CONTENTS (from address 100) ######
# [0]	userInput
# [1]	fib(userInput)

